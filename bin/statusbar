#!/bin/sh

font="PragmataPro Mono:size=9"

text_color="#FFFFFF"     # white
accent_color="#FFD480"   # yellow
dim_color="#808080"      # grey
bad_color="#FF695C"      # red
good_color="#79A4A9"     # green
bg_color="#77000000"     # dark transparent

clock() {
    echo "%{A:firefox --new-tab https\://calendar.google.com/:}$(date '+%a %-e %b %-H:%M')%{A}"
}

groups() {
    current_group=$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')
    current_empty=1

    enabled_groups=""
    visible_groups=""

    for win in $(xwininfo -root -children | awk '$1 ~ /^0x/ {print $1}'); do
        window_group=$(xprop -id "$win" _NET_WM_DESKTOP 2>/dev/null | awk -F '=' '{print $2}' | sed 's/^ //')

        echo "$window_group" | grep -qE '^[0-9]$' || continue

        enabled_groups="$enabled_groups $window_group"

        if [ "$window_group" = "$current_group" ]; then
            current_empty=0 # found a window in current group
        fi

        if xwininfo -id "$win" | grep -q "Map State: IsViewable"; then
            visible_groups="$visible_groups $window_group"
        fi
    done

    enabled_groups="$enabled_groups $current_group"

    # remove duplicates
    enabled_groups=$(echo "$enabled_groups" | tr ' ' '\n' | sort -nu | tr '\n' ' ')
    visible_groups=$(echo "$visible_groups" | tr ' ' '\n' | sort -nu | tr '\n' ' ')

    output=""

    for i in $enabled_groups; do
        group="$i"

        fg_color="$accent_color"

        if ! echo "$visible_groups" | grep -qw "$i"; then
            fg_color="$dim_color"
        fi

        deco_color="$accent_color"

        if [ "$current_empty" -eq 1 ]; then
            deco_color="$dim_color"
        fi

        group="%{F$fg_color}%{A:xdotool key super+$i:}$group%{A}%{F-}"

        if [ "$i" = "$current_group" ]; then
            group="%{U$deco_color}%{+u}${group}%{-u}${U-}"
        fi

        output="$output$group "
    done

    # trim ending spaces
    echo "$output" | sed 's/ *$//'
}

battery() {
    # hide when not charging
    acpi -b | grep -E -q ': (Not charging|Full),' && return

    level=$(acpi -b | awk -F ', ' '{print $2}' | tr -d '%')

    if [ "$level" -lt 15 ]; then
        echo "%{F$bad_color}[$level%%]%{F-}"
    else
        echo "%{F$good_color}[$level%%]%{F-}"
    fi
}

restart() {
    lemonpid=$(pstree -p $$ | grep -oP 'lemonbar\(\K[0-9]+')
    echo "%{A:kill $lemonpid && exec $0:}%{F$dim_color}î©¶%{F-}%{A}"
}

geometry() {
    width=300 # predefined width of the bar

    # shellcheck disable=SC2046 # intended splitting of arguments
    set -- $(xrandr --query | awk '/ primary / {print $4}' | tr 'x+' ' ')
    x=$(( $3 + ($1 - width) / 2 ))
    echo "${width}x25+$x+$4"
}

lemonbar="lemonbar -p -d -g $(geometry) -u 3 -F '$text_color' -B '$bg_color' -f '$font'"

(
    while true; do
        echo "  $(groups) %{c}$(clock) %{r}$(battery) $(restart)  "
        sleep 0.3
    done
) | eval "$lemonbar" | setsid "$SHELL"
